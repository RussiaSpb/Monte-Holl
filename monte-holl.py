#********************************************************************************************
#
# Программа многократно моделирует загадку Монти-Холла. Имеется 3 двери
# - за одной находится приз, за двумя другими ничего нет. Ведущий предлагает
# игроку выбрать дверь и озвучить свой выбор, после этого ведущий открывает
# одну из невыбранных двух дверей (за которой нет приза) и спрашивает игрока,
# будет ли он менять свой выбор. Программа моделирует поведение двух независимых
# игроков - первый никогда свой выбор не меняет, второй всегда свой выбор меняет.
# Результаты каждой игры записываются, потом считается частота выигрыша каждого
# игрока.
# Входные данные: input.txt, число - количество игр (испытаний)
# Выходные данные: output.txt, первая строка - три числа - кол-во игр (испытаний),
# частота выигрыша первого игрока (%), частота выигрыша второго игрока (%), далее начиная
# со второй строки - три колонки - матрица распределения приза в каждой игре и распределение
# открытой двери ведущим в зависимости от выбора второго игрока (1 - приз, 0 - нет приза,
# -1 - дверь открыта ведущим), матрица первого игрока (номер выбранной двери, угадал или нет
# где находится приз), матрица второго игрока (номер выбранной двери, номер двери которую
# выбрал повторно, угадал или нет где находится приз)
#
#*********************************************************************************************

# импортируем библиотеки numpy, random
import numpy as nm
import random as rd

# Функция. Заполняем матрицу распределения приза
def putting_prize (m):
    
    for i in range (m):
        
          r = rd.random ()
          if r < (1 / 3):
              matr[i, 0] = 1
              matr[i, 1] = 0
              matr[i, 2] = 0
          elif r < (2 / 3):
              matr[i, 0] = 0
              matr[i, 1] = 1
              matr[i, 2] = 0
          else:
              matr[i, 0] = 0
              matr[i, 1] = 0
              matr[i, 2] = 1

# Функция. Игрок делает выбор двери
def player_choice (player, j):
    
    r = rd.random ()
    
    if r < (1 / 3):
        player[j, 0] = 1
    elif r < (2 / 3):
        player[j, 0] = 2
    else: player[j, 0] = 3

# Функция. Ведущий открывает одну из невыбранных вторым игроком дверей без приза
def open0door (j, num):
    
    r = rd.random ()
    
    if num == 1:
        
        if matr[j, 0] == 1:
            if r < 0.5:
                matr[j, 1] = -1
            else:
                matr[j, 2] = -1
        if matr[j, 1] == 1:
            matr[j, 2] = -1
        if matr[j, 2] == 1:
            matr[j, 1] = -1
            
    if num == 2:
        
        if matr[j, 0] == 1:
            matr[j, 2] = -1
        if matr[j, 1] == 1:
            if r < 0.5:
                matr[j, 0] = -1
            else:
                matr[j, 2] = -1
        if matr[j, 2] == 1:
            matr[j, 0] = -1
        
    if num == 3:
        
        if matr[j, 0] == 1:
            matr[j, 1] = -1
        if matr[j, 1] == 1:
            matr[j, 0] = -1
        if matr[j, 2] == 1:
            if r < 0.5:
                matr[j, 0] = -1
            else:
                matr[j, 1] = -1
                
# Функция. Второй игрок меняет свой выбор и выбирает другую дверь (после хода ведущего)
def player2choice (i, num):
    
    if num == 1:
        if matr[i, 1] == -1:
            pl2[i, 1] = 3
        else:
            pl2[i, 1] = 2
            
    if num == 2:
        if matr[i, 0] == -1:
            pl2[i, 1] = 3
        else:
            pl2[i, 1] = 1
    
    if num == 3:
        if matr[i, 0] == -1:
            pl2[i, 1] = 2
        else:
            pl2[i, 1] = 1
            
# Функция. Записываем результаты серии игр (испытаний) в выходной файл output.txt    
def write_result (m, n, pl1_v, pl2_v):
    
    f = open ('output.txt', 'w')
    
    f.write (str (m) + '          ' + str (pl1_v / m) + '%    ' + str (pl2_v / m) + '%\n')
    
    for i in range (m):
        
        for j in range (n):
            if matr[i, j] != -1:
                f.write (' ')    
            f.write (str (matr[i, j]) + ' ')
            
        f.write ('     ')
            
        for j in range (2):
            f.write (str (pl1[i, j]) + ' ')
            
        f.write ('     ')
        
        for j in range (3):
            f.write (str (pl2[i, j]) + ' ')
            
        f.write ('\n')
        
    f.close ()

# тело программы

# читаем из входного файла input.txt кол-во игр (испытаний)
f = open ('input.txt', 'rt')
m = int (f.read ())
n = 3
f.close ()

# создаем список размеров матрицы распределения приза
l = [m, n]

# создаем матрицу распределения приза
matr = nm.zeros (l, dtype = int)
putting_prize (m)

# создаем матрицы первого и вторго игроков
pl1 = nm.zeros ((m, 2), dtype = int)
pl2 = nm.zeros ((m, 3), dtype = int)

# заводим счетчики количества выигрышей первого и второго игроков
pl1_v = 0
pl2_v = 0

# проводим серию игр (испытаний)
for i in range (m):
    
    # первый игрок выбирает дверь
    player_choice (pl1, i)
    
    # если первый игрок угадал приз, записываем это в его матрицу и увеличиваем счетчик
    if matr[i, int (pl1[i, 0]) - 1] == 1:
        pl1[i, 1] = 1
        pl1_v += 1
    
    # второй игрок выбирает дверь
    player_choice (pl2, i)
    
    # ведущий открывает одну из дверей без приза для второго игрока
    open0door (i, pl2[i, 0])
    
    # второй игрок меняет свой выбор в зависимости от открытой ведущим двери
    player2choice (i, pl2[i, 0])
    
    # если второй игрок угадал приз, записываем это в его матрицу и увеличиваем счетчик
    if matr[i, int (pl2[i, 1]) - 1] == 1:
        pl2[i, 2] = 1
        pl2_v += 1

# записываем результаты серии игр (испытаний) в выходной файл output.txt   
write_result (m, n, pl1_v, pl2_v)

# информируем об успешном завершении программы
print ("Создан файл 'output.txt' с выходными данными")







